flaskapp.wsgi 

#!/usr/bin/python3.7
import sys
import logging
logging.basicConfig(stream=sys.stderr)
sys.path.insert(0,"/var/www/FlaskApp/")

from FlaskApp import app as application
application.secret_key = 'test123'
application.config["DEBUG"] = True


__init__.py

from flask import Flask, request, jsonify, session
import mysql.connector
from mysql.connector import Error
from datetime import datetime
from uuid import uuid4

app = Flask(__name__)

# this function selects the most recent timestamp and temperature from a given table
def select_recent_temperature(table):
	query = "SELECT time_recieved, temperature FROM "+ table +" ORDER BY time_recieved DESC LIMIT 1"
	conn = None
	try:
		conn = mysql.connector.connect(host= 'localhost', database= 'greenhouse_data', user='root', password='rJ@mJ@r7')
		cursor = conn.cursor()
		cursor.execute(query)
		data = cursor.fetchone()
		timestamp = str(data[0])
		temperature = str(data[1])
	except Error as e:
		print(e)

	finally:
		conn.close()
		cursor.close()
		return [timestamp, temperature]

def select_all_statuses():
	query = "Select component, status, time_of_failure from status"
	conn = None
	data = {}
	try:
		conn = mysql.connector.connect(host= 'localhost', database= 'greenhouse_data', user='root', password = "rJ@mJ@r7")
		cursor = conn.cursor()
		cursor.execute(query)
		row = cursor.fetchone()
		while row is not None:
			data[row[0]] = [row[1], row[2]]
			row = cursor.fetchone()

	except Error as e:
		print(e)

	finally:
		conn.close()
		cursor.close()
		return data

def get_parameters():
	conn = None
	data = {}
	try:
		conn = mysql.connector.connect(host='localhost', database='greenhouse_data', user='root', password='rJ@mJ@r7')
		cursor = conn.cursor()
		query = "SELECT * FROM parameters"
		cursor.execute(query)
		parameters = cursor.fetchone()

		data["min_temp"] = str(parameters[0])
		data["max_temp"] = str(parameters[1])
		data["fert_water_conductivity"] = str(parameters[2])
		data["hydro_duration"] = str(parameters[3])
		data["hydro_freqency"] = str(parameters[4])
	except Error as e:
		print(e)

	finally:
		conn.close()
		cursor.close()
		return data

def update_parameters(columns, values):
	conn = None
	try:
		conn = mysql.connector.connect(host= 'localhost', database= 'greenhouse_data', user='root', password='rJ@mJ@r7')
		cursor = conn.cursor()

		for i in range(0, len(columns)):
			temp = ''
			temp = temp + columns[i]
			query = "UPDATE parameters SET " + temp + " = " + str(values[i])
			cursor.execute(query)

	except Error as e:
		print(e)

	finally:
		if conn != None:
			conn.commit()
			conn.close()
			cursor.close()
			return "Successful"
		else:
			return "Error"

def update_manual_controls(system, status):
	conn = None
	try:
		conn = mysql.connector.connect(host='localhost', database='greenhouse_data', user='root', password='rJ@mJ@r7')
		cursor = conn.cursor()

		query = "UPDATE manual_controls SET" + system + " = " + str(status)
		cursor.execute(query)

	except Error as e:
		print(e)

	finally:
		conn.close()
		cursor.close()
		return "Updated"

def get_manual_controls():
	conn = None
	data = {}
	try:
		conn = mysql.connector.connect(host='localhost', database='greenhouse_data', user='root', password='rJ@mJ@r7')
		cursor = conn.cursor(buffered=True)

		query = "Select status from manual_controls"

		cursor.execute(query)
		statuses = cursor.fetchall()
		data["big_fan"] = (statuses[0][0])
		data["little_fan"] = (statuses[1][0])
		data["water"] = (statuses[2][0])
	except Error as e:
		print(e)
	finally:
		conn.close()
		cursor.close()
		return data


# returns False if there has not been a token assigned, or the wrong token is given
def authenticate(token):
	if not session.get("token") == None and token == str(session["token"]):
		return True
	else:
		return False

@app.route("/assignToken", methods=["GET"])
def assignToken():
	key = request.form.get("key",False)
	if str(key) == str(app.secret_key):
		sesToken = uuid4()
		session["token"] = sesToken
		return jsonify({"token":sesToken})
	else:
		return "text me if you get this"
@app.route("/")
def home():
	return "Up and running!"

@app.route("/Jacob")
def Jacob():
	return "Jacob ily bb <3"

@app.route("/getCurrentTemperatures", methods = ["GET"])
def getCurrentTemperatures():
	if authenticate(str(request.form.get("token", False))):
		tempIBCVal = select_recent_temperature("IBC_temperature")[1]
		tempInVal = select_recent_temperature("inside_temperature")[1]
		tempOutVal = select_recent_temperature("outside_temperature")[1]
		tempCompostVal = select_recent_temperature("mulch_temperature")[1]
		return jsonify(tempIBC=tempIBCVal, tempIn=tempInVal, tempOut=tempOutVal, tempCompost=tempCompostVal)
	else:
		return "bad token"
@app.route("/getCurrentStatuses", methods = ["GET"])
def getCurrentStatuses():
	statuses = select_all_statuses()
	return jsonify(statuses)

# this function will handle get and post requests involving parameters
@app.route("/parameters", methods = ["GET", "POST"])
def parameters():
	if request.method == 'POST':

		# the request body will have to be formatted very specifically:
		# Every parameter that wants to be changed will be put in a list defined by the parameters key
		params = request.form["parameters"]
		# Every value will be put int a list defined by the values key
		vals = request.form["values"]

		if not isinstance(params, list):
			params = [str(params)]
			vals = [vals]
		# the input to update_parameters need to be lists, otherwise the function won't work
		# even if the input is just of length one, it needs to be in a list
		return update_parameters(params, vals)

	elif request.method  == 'GET':
		# if a get request is done, then json results from the database will be returned.
		data = get_parameters()
		return jsonify(data)

@app.route("/manualControls", methods = ["GET", "POST"])
def manualControls():
	if request.method == "POST":
		system = request.form["system"]
		status = request.form["status"]
		return update_manual_controls(system, status)
	if request.method == "GET":
		return jsonify(get_manual_controls())

if __name__ == "__main__":
	app.run()


